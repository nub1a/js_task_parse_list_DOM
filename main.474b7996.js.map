{"version":3,"sources":["scripts/main.js"],"names":["list","document","querySelector","employees","children","sortList","parameters","sort","currentValue","nextValue","dataset","salary","replace","sortedEmployees","getEmployees","reduce","accumulator","parameter","push","name","textContent","trim","append"],"mappings":";AAAA,aA4BA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1BA,IAAMA,EAAOC,SAASC,cAAc,MAC9BC,EAAYH,EAAKI,SAEvB,SAASC,EAASC,GACT,OAAA,EAAIA,GAAYC,KACrB,SAACC,EAAcC,GACN,OAACA,EAAUC,QAAQC,OAAOC,QAAQ,QAAS,KAC7CJ,EAAaE,QAAQC,OAAOC,QAAQ,QAAS,MAIxD,IAAMC,EAAkBR,EAASF,GAEjC,SAASW,EAAaR,GACbA,OAAAA,EAAWS,OAChB,SAACC,EAAaC,GAMLD,OALPA,EAAYE,KAAZ,EAAA,CACEC,KAAMF,EAAUG,YAAYC,QACzBJ,EAAUP,UAGRM,GACN,IAGPF,EAAaD,GACbb,EAAKsB,OAALtB,MAAAA,EAAea,EAAAA","file":"main.474b7996.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst list = document.querySelector('ul');\nconst employees = list.children;\n\nfunction sortList(parameters) {\n  return [...parameters].sort(\n    (currentValue, nextValue) => {\n      return +nextValue.dataset.salary.replace(/[$,]/g, '')\n        - +currentValue.dataset.salary.replace(/[$,]/g, '');\n    });\n}\n\nconst sortedEmployees = sortList(employees);\n\nfunction getEmployees(parameters) {\n  return parameters.reduce(\n    (accumulator, parameter) => {\n      accumulator.push({\n        name: parameter.textContent.trim(),\n        ...parameter.dataset,\n      });\n\n      return accumulator;\n    }, []);\n}\n\ngetEmployees(sortedEmployees);\nlist.append(...sortedEmployees);\n"]}